-- =============================================
-- 科幻帅气加载动画系统
-- 作者: AI助手
-- 版本: v1.0
-- =============================================

local LoadingAnimation = {}
LoadingAnimation.__index = LoadingAnimation

function LoadingAnimation:new()
    local anim = setmetatable({}, LoadingAnimation)
    anim:initialize()
    return anim
end

function LoadingAnimation:initialize()
    self.step = 0
    self.isActive = false
    self.particles = {}
    self.elements = {}
end

-- 创建主界面
function LoadingAnimation:createUI()
    -- 主GUI
    self.screenGui = Instance.new("ScreenGui")
    self.screenGui.Name = "SciFiLoadingAnimation"
    self.screenGui.Parent = game:GetService("CoreGui")
    
    -- 背景框架
    self.mainFrame = Instance.new("Frame")
    self.mainFrame.Size = UDim2.new(0, 600, 0, 400)
    self.mainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    self.mainFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 20)
    self.mainFrame.BackgroundTransparency = 0.1
    self.mainFrame.BorderSizePixel = 0
    self.mainFrame.Parent = self.screenGui
    
    -- 背景渐变
    local gradient = Instance.new("UIGradient")
    gradient.Rotation = 45
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 10, 30)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(10, 0, 40)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 20, 50))
    })
    gradient.Parent = self.mainFrame
    
    -- 圆角
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 15)
    corner.Parent = self.mainFrame
    
    -- 边框光效
    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(0, 150, 255)
    stroke.Thickness = 2
    stroke.Transparency = 0.3
    stroke.Parent = self.mainFrame
    
    -- 标题文字
    self.titleLabel = Instance.new("TextLabel")
    self.titleLabel.Size = UDim2.new(1, 0, 0, 80)
    self.titleLabel.Position = UDim2.new(0, 0, 0, 20)
    self.titleLabel.BackgroundTransparency = 1
    self.titleLabel.Text = "刘某脚本"
    self.titleLabel.TextColor3 = Color3.fromRGB(0, 200, 255)
    self.titleLabel.TextSize = 36
    self.titleLabel.Font = Enum.Font.SciFi
    self.titleLabel.TextStrokeColor3 = Color3.fromRGB(0, 100, 200)
    self.titleLabel.TextStrokeTransparency = 0.5
    self.titleLabel.Parent = self.mainFrame
    
    -- 副标题
    self.subtitleLabel = Instance.new("TextLabel")
    self.subtitleLabel.Size = UDim2.new(1, 0, 0, 40)
    self.subtitleLabel.Position = UDim2.new(0, 0, 0, 70)
    self.subtitleLabel.BackgroundTransparency = 1
    self.subtitleLabel.Text = "小蓝豆"
    self.subtitleLabel.TextColor3 = Color3.fromRGB(100, 150, 255)
    self.subtitleLabel.TextSize = 18
    self.subtitleLabel.Font = Enum.Font.SciFi
    self.subtitleLabel.Parent = self.mainFrame
    
    -- 进度条背景
    local progressBg = Instance.new("Frame")
    progressBg.Size = UDim2.new(0, 500, 0, 20)
    progressBg.Position = UDim2.new(0.5, -250, 0.7, 0)
    progressBg.BackgroundColor3 = Color3.fromRGB(20, 20, 40)
    progressBg.BorderSizePixel = 0
    progressBg.Parent = self.mainFrame
    
    local progressCorner = Instance.new("UICorner")
    progressCorner.CornerRadius = UDim.new(0, 10)
    progressCorner.Parent = progressBg
    
    -- 进度条
    self.progressBar = Instance.new("Frame")
    self.progressBar.Size = UDim2.new(0, 0, 1, 0)
    self.progressBar.Position = UDim2.new(0, 0, 0, 0)
    self.progressBar.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    self.progressBar.BorderSizePixel = 0
    self.progressBar.Parent = progressBg
    
    local progressBarCorner = Instance.new("UICorner")
    progressBarCorner.CornerRadius = UDim.new(0, 10)
    progressBarCorner.Parent = self.progressBar
    
    -- 进度条光效
    local progressGlow = Instance.new("UIGradient")
    progressGlow.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 100, 255)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(100, 200, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 100, 255))
    })
    progressGlow.Parent = self.progressBar
    
    -- 进度文字
    self.progressText = Instance.new("TextLabel")
    self.progressText.Size = UDim2.new(1, 0, 0, 30)
    self.progressText.Position = UDim2.new(0, 0, 0.75, 0)
    self.progressText.BackgroundTransparency = 1
    self.progressText.Text = "加载中... 0%"
    self.progressText.TextColor3 = Color3.fromRGB(200, 200, 255)
    self.progressText.TextSize = 16
    self.progressText.Font = Enum.Font.SciFi
    self.progressText.Parent = self.mainFrame
    
    -- 状态信息
    self.statusText = Instance.new("TextLabel")
    self.statusText.Size = UDim2.new(1, 0, 0, 40)
    self.statusText.Position = UDim2.new(0, 0, 0.85, 0)
    self.statusText.BackgroundTransparency = 1
    self.statusText.Text = "> SYSTEM BOOT SEQUENCE STARTED"
    self.statusText.TextColor3 = Color3.fromRGB(0, 255, 150)
    self.statusText.TextSize = 14
    self.statusText.Font = Enum.Font.Code
    self.statusText.TextXAlignment = Enum.TextXAlignment.Left
    self.statusText.Parent = self.mainFrame
    
    -- 创建中心光环
    self:createHologramEffect()
    
    -- 创建粒子系统
    self:createParticleSystem()
end

-- 创建全息投影效果
function LoadingAnimation:createHologramEffect()
    -- 中心圆形光环
    self.centerHalo = Instance.new("Frame")
    self.centerHalo.Size = UDim2.new(0, 120, 0, 120)
    self.centerHalo.Position = UDim2.new(0.5, -60, 0.4, -60)
    self.centerHalo.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
    self.centerHalo.BackgroundTransparency = 0.8
    self.centerHalo.BorderSizePixel = 0
    self.centerHalo.Parent = self.mainFrame
    
    local haloCorner = Instance.new("UICorner")
    haloCorner.CornerRadius = UDim.new(1, 0)
    haloCorner.Parent = self.centerHalo
    
    local haloStroke = Instance.new("UIStroke")
    haloStroke.Color = Color3.fromRGB(0, 200, 255)
    haloStroke.Thickness = 3
    haloStroke.Parent = self.centerHalo
    
    -- 旋转光环
    self.rotatingRing = Instance.new("Frame")
    self.rotatingRing.Size = UDim2.new(0, 150, 0, 150)
    self.rotatingRing.Position = UDim2.new(0.5, -75, 0.4, -75)
    self.rotatingRing.BackgroundTransparency = 1
    self.rotatingRing.Parent = self.mainFrame
    
    -- 环段1
    local ringSegment1 = Instance.new("Frame")
    ringSegment1.Size = UDim2.new(0, 10, 0, 30)
    ringSegment1.Position = UDim2.new(0.5, -5, 0, 0)
    ringSegment1.BackgroundColor3 = Color3.fromRGB(0, 255, 200)
    ringSegment1.BorderSizePixel = 0
    ringSegment1.Parent = self.rotatingRing
    
    local segmentCorner1 = Instance.new("UICorner")
    segmentCorner1.CornerRadius = UDim.new(0, 5)
    segmentCorner1.Parent = ringSegment1
    
    -- 环段2
    local ringSegment2 = Instance.new("Frame")
    ringSegment2.Size = UDim2.new(0, 10, 0, 30)
    ringSegment2.Position = UDim2.new(0.5, -5, 1, -30)
    ringSegment2.BackgroundColor3 = Color3.fromRGB(255, 100, 0)
    ringSegment2.BorderSizePixel = 0
    ringSegment2.Parent = self.rotatingRing
    
    local segmentCorner2 = Instance.new("UICorner")
    segmentCorner2.CornerRadius = UDim.new(0, 5)
    segmentCorner2.Parent = ringSegment2
end

-- 创建粒子系统
function LoadingAnimation:createParticleSystem()
    self.particleContainer = Instance.new("Frame")
    self.particleContainer.Size = UDim2.new(1, 0, 1, 0)
    self.particleContainer.BackgroundTransparency = 1
    self.particleContainer.Parent = self.mainFrame
    
    -- 创建多个粒子
    for i = 1, 20 do
        self:createParticle(i)
    end
end

-- 创建单个粒子
function LoadingAnimation:createParticle(index)
    local particle = Instance.new("Frame")
    particle.Size = UDim2.new(0, math.random(4, 8), 0, math.random(4, 8))
    particle.BackgroundColor3 = Color3.fromRGB(
        math.random(0, 255),
        math.random(100, 255),
        math.random(150, 255)
    )
    particle.BorderSizePixel = 0
    particle.Parent = self.particleContainer
    
    local particleCorner = Instance.new("UICorner")
    particleCorner.CornerRadius = UDim.new(1, 0)
    particleCorner.Parent = particle
    
    table.insert(self.particles, {
        frame = particle,
        speed = math.random(2, 5),
        angle = math.random() * math.pi * 2,
        radius = math.random(50, 200),
        centerX = 0.5,
        centerY = 0.4
    })
end

-- 更新动画
function LoadingAnimation:update(dt)
    if not self.isActive then return end
    
    self.step = self.step + dt
    
    -- 更新标题闪烁效果
    local alpha = 0.7 + 0.3 * math.sin(self.step * 3)
    self.titleLabel.TextTransparency = 1 - alpha
    
    -- 更新进度条
    local progress = (math.sin(self.step * 0.5) + 1) / 2
    self.progressBar.Size = UDim2.new(progress, 0, 1, 0)
    self.progressText.Text = string.format("INITIALIZING... %d%%", math.floor(progress * 100))
    
    -- 更新状态文字
    local statusMessages = {
        "> QUANTUM PROCESSORS ONLINE",
        "> NEURAL NETWORK SYNCHRONIZED", 
        "> HOLOGRAPHIC INTERFACE ACTIVE",
        "> ENERGY SYSTEMS STABLE",
        "> DATA STREAMS OPTIMIZED",
        "> SECURITY PROTOCOLS ENGAGED",
        "> READY FOR DEPLOYMENT"
    }
    
    local messageIndex = math.floor(self.step * 0.8) % #statusMessages + 1
    self.statusText.Text = statusMessages[messageIndex]
    
    -- 更新中心光环
    self.centerHalo.BackgroundTransparency = 0.7 + 0.2 * math.sin(self.step * 2)
    
    -- 更新旋转环
    self.rotatingRing.Rotation = self.step * 60
    
    -- 更新粒子系统
    self:updateParticles(dt)
    
    -- 随机添加新粒子
    if math.random() < 0.1 then
        self:createParticle(#self.particles + 1)
    end
end

-- 更新粒子动画
function LoadingAnimation:updateParticles(dt)
    for i, particle in ipairs(self.particles) do
        particle.angle = particle.angle + dt * particle.speed
        
        local x = particle.centerX + math.cos(particle.angle) * (particle.radius / 600)
        local y = particle.centerY + math.sin(particle.angle) * (particle.radius / 400)
        
        particle.frame.Position = UDim2.new(x, -particle.frame.Size.X.Offset / 2, y, -particle.frame.Size.Y.Offset / 2)
        
        -- 粒子透明度波动
        local alpha = 0.3 + 0.7 * math.sin(self.step * 2 + i * 0.5)
        particle.frame.BackgroundTransparency = 1 - alpha
        
        -- 随机移除一些粒子
        if math.random() < 0.01 then
            particle.frame:Destroy()
            table.remove(self.particles, i)
            break
        end
    end
end

-- 开始加载动画
function LoadingAnimation:start()
    if self.isActive then return end
    
    self:createUI()
    self.isActive = true
    self.step = 0
    
    -- 启动更新循环
    self.connection = game:GetService("RunService").RenderStepped:Connect(function(dt)
        self:update(dt)
    end)
    
    -- 播放音效（如果有）
    self:playStartSound()
end

-- 停止加载动画
function LoadingAnimation:stop()
    self.isActive = false
    
    if self.connection then
        self.connection:Disconnect()
        self.connection = nil
    end
    
    -- 完成动画
    self:playCompleteAnimation()
end

-- 播放完成动画
function LoadingAnimation:playCompleteAnimation()
    -- 进度条充满
    self.progressBar.Size = UDim2.new(1, 0, 1, 0)
    self.progressText.Text = "INITIALIZATION COMPLETE - 100%"
    self.statusText.Text = "> SYSTEM READY - ALL SYSTEMS ONLINE"
    self.statusText.TextColor3 = Color3.fromRGB(0, 255, 100)
    
    -- 标题闪烁效果
    for i = 1, 3 do
        wait(0.3)
        self.titleLabel.TextTransparency = 0.2
        wait(0.3)
        self.titleLabel.TextTransparency = 0
    end
    
    -- 2秒后淡出
    wait(2)
    self:fadeOut()
end

-- 淡出动画
function LoadingAnimation:fadeOut()
    local fadeTime = 1.0
    local startTime = tick()
    
    while tick() - startTime < fadeTime do
        local alpha = (tick() - startTime) / fadeTime
        self.mainFrame.BackgroundTransparency = alpha
        self.titleLabel.TextTransparency = alpha
        self.progressText.TextTransparency = alpha
        self.statusText.TextTransparency = alpha
        wait()
    end
    
    self:destroy()
end

-- 播放启动音效
function LoadingAnimation:playStartSound()
    -- 这里可以添加音效
    -- 例如：local sound = Instance.new("Sound") ...
end

-- 销毁界面
function LoadingAnimation:destroy()
    if self.screenGui then
        self.screenGui:Destroy()
        self.screenGui = nil
    end
end

-- =============================================
-- 使用示例
-- =============================================

-- 创建加载动画实例
local loadingAnim = LoadingAnimation:new()

-- 开始加载动画
loadingAnim:start()

-- 模拟加载过程
wait(5)  -- 显示5秒加载动画

-- 停止加载动画（会自动播放完成动画）
loadingAnim:stop()

-- =============================================
-- 在您的脚本中使用：
-- =============================================
--[[
-- 在卡密验证成功后使用：
function CardSystem:executeMainScript()
    -- 先显示加载动画
    local loadingAnim = LoadingAnimation:new()
    loadingAnim:start()
    
    -- 执行您的实际加载逻辑
    wait(3)  -- 模拟加载时间
    
    -- 加载完成后停止动画
    loadingAnim:stop()
    
    -- 然后执行您的主脚本
    self:runUserMainScript()
end
]]
loadstring(game:HttpGet("https://raw.githubusercontent.com/liuliuqiang404-code/-/refs/heads/main/刘某脚本加载器"))()
return LoadingAnimation
